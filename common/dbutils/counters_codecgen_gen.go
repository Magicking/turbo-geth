// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package dbutils

import (
	"errors"
	codec1978 "github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF81 = 1
	codecSelferCcRAW1  = 255
	// ----- value types used ----
	codecSelferValueTypeArray1     = 10
	codecSelferValueTypeMap1       = 9
	codecSelferValueTypeString1    = 6
	codecSelferValueTypeInt1       = 2
	codecSelferValueTypeUint1      = 3
	codecSelferValueTypeFloat1     = 4
	codecSelferValueTypeNil1       = 1
	codecSelferBitsize1            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil1 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct1 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1 struct{}

func codecSelfer1False() bool { return false }

func init() {
	if codec1978.GenVersion != 17 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec1978.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 17, need " + ver + ". Re-generate file: " + file))
	}
}

func (x *IDs) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(1)
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.Example))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(1)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"1\"")
			} else {
				r.EncodeString(`1`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.Example))
			z.EncWriteMapEnd()
		}
	}
}

func (x *IDs) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil1 {
		*(x) = IDs{}
	} else if yyct2 == codecSelferValueTypeMap1 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray1 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
	}
}

func (x *IDs) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "1":
			x.Example = (uint64)(r.DecodeUint64())
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *IDs) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = z.DecCheckBreak()
	}
	if yyb5 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Example = (uint64)(r.DecodeUint64())
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = z.DecCheckBreak()
		}
		if yyb5 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
}

func (x *Aggregates) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yysep2 := !z.EncBinary()
		yy2arr2 := z.EncBasicHandle().StructToArray
		_, _ = yysep2, yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(1)
			z.EncWriteArrayElem()
			r.EncodeUint(uint64(x.ExampleAvg))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(1)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"1\"")
			} else {
				r.EncodeString(`1`)
			}
			z.EncWriteMapElemValue()
			r.EncodeUint(uint64(x.ExampleAvg))
			z.EncWriteMapEnd()
		}
	}
}

func (x *Aggregates) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil1 {
		*(x) = Aggregates{}
	} else if yyct2 == codecSelferValueTypeMap1 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray1 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct1)
	}
}

func (x *Aggregates) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := z.StringView(r.DecodeStringAsBytes())
		z.DecReadMapElemValue()
		switch yys3 {
		case "1":
			x.ExampleAvg = (uint64)(r.DecodeUint64())
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
}

func (x *Aggregates) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj5 int
	var yyb5 bool
	var yyhl5 bool = l >= 0
	yyj5++
	if yyhl5 {
		yyb5 = yyj5 > l
	} else {
		yyb5 = z.DecCheckBreak()
	}
	if yyb5 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ExampleAvg = (uint64)(r.DecodeUint64())
	for {
		yyj5++
		if yyhl5 {
			yyb5 = yyj5 > l
		} else {
			yyb5 = z.DecCheckBreak()
		}
		if yyb5 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj5-1, "")
	}
}
